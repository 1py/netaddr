=CIDR Tests=

Copyright (c) 2008-2009, David P. D. Moss. All rights reserved.

{{{

>>> from netaddr import *

}}}

==Basic IP Range Tuple Sorting==

{{{

>>> ranges = (
... (IP('::'), IP('::')),
... (IP('0.0.0.0'), IP('255.255.255.255')),
... (IP('::'), IP('::FFFF')),
... (IP('0.0.0.0'), IP('0.0.0.0')),
... )

>>> sorted(ranges)
[(IP('0.0.0.0'), IP('0.0.0.0')), (IP('0.0.0.0'), IP('255.255.255.255')), (IP('::'), IP('::')), (IP('::'), IP('::ffff'))]

}}}

Worst case IPv4 range to CIDR conversion.

{{{

>>> for ip in iprange_to_cidrs('0.0.0.1', '255.255.255.254'):
...     ip
...
IP('0.0.0.1')
IP('0.0.0.2/31')
IP('0.0.0.4/30')
IP('0.0.0.8/29')
IP('0.0.0.16/28')
IP('0.0.0.32/27')
IP('0.0.0.64/26')
IP('0.0.0.128/25')
IP('0.0.1.0/24')
IP('0.0.2.0/23')
IP('0.0.4.0/22')
IP('0.0.8.0/21')
IP('0.0.16.0/20')
IP('0.0.32.0/19')
IP('0.0.64.0/18')
IP('0.0.128.0/17')
IP('0.1.0.0/16')
IP('0.2.0.0/15')
IP('0.4.0.0/14')
IP('0.8.0.0/13')
IP('0.16.0.0/12')
IP('0.32.0.0/11')
IP('0.64.0.0/10')
IP('0.128.0.0/9')
IP('1.0.0.0/8')
IP('2.0.0.0/7')
IP('4.0.0.0/6')
IP('8.0.0.0/5')
IP('16.0.0.0/4')
IP('32.0.0.0/3')
IP('64.0.0.0/2')
IP('128.0.0.0/2')
IP('192.0.0.0/3')
IP('224.0.0.0/4')
IP('240.0.0.0/5')
IP('248.0.0.0/6')
IP('252.0.0.0/7')
IP('254.0.0.0/8')
IP('255.0.0.0/9')
IP('255.128.0.0/10')
IP('255.192.0.0/11')
IP('255.224.0.0/12')
IP('255.240.0.0/13')
IP('255.248.0.0/14')
IP('255.252.0.0/15')
IP('255.254.0.0/16')
IP('255.255.0.0/17')
IP('255.255.128.0/18')
IP('255.255.192.0/19')
IP('255.255.224.0/20')
IP('255.255.240.0/21')
IP('255.255.248.0/22')
IP('255.255.252.0/23')
IP('255.255.254.0/24')
IP('255.255.255.0/25')
IP('255.255.255.128/26')
IP('255.255.255.192/27')
IP('255.255.255.224/28')
IP('255.255.255.240/29')
IP('255.255.255.248/30')
IP('255.255.255.252/31')
IP('255.255.255.254')

}}}

Worst case IPv4 compatible IPv6 range to CIDR. 

{{{

>>> for ip in iprange_to_cidrs('::1', '::255.255.255.254'):
...     ip
...
IP('::1')
IP('::2/127')
IP('::4/126')
IP('::8/125')
IP('::10/124')
IP('::20/123')
IP('::40/122')
IP('::80/121')
IP('::100/120')
IP('::200/119')
IP('::400/118')
IP('::800/117')
IP('::1000/116')
IP('::2000/115')
IP('::4000/114')
IP('::8000/113')
IP('::0.1.0.0/112')
IP('::0.2.0.0/111')
IP('::0.4.0.0/110')
IP('::0.8.0.0/109')
IP('::0.16.0.0/108')
IP('::0.32.0.0/107')
IP('::0.64.0.0/106')
IP('::0.128.0.0/105')
IP('::1.0.0.0/104')
IP('::2.0.0.0/103')
IP('::4.0.0.0/102')
IP('::8.0.0.0/101')
IP('::16.0.0.0/100')
IP('::32.0.0.0/99')
IP('::64.0.0.0/98')
IP('::128.0.0.0/98')
IP('::192.0.0.0/99')
IP('::224.0.0.0/100')
IP('::240.0.0.0/101')
IP('::248.0.0.0/102')
IP('::252.0.0.0/103')
IP('::254.0.0.0/104')
IP('::255.0.0.0/105')
IP('::255.128.0.0/106')
IP('::255.192.0.0/107')
IP('::255.224.0.0/108')
IP('::255.240.0.0/109')
IP('::255.248.0.0/110')
IP('::255.252.0.0/111')
IP('::255.254.0.0/112')
IP('::255.255.0.0/113')
IP('::255.255.128.0/114')
IP('::255.255.192.0/115')
IP('::255.255.224.0/116')
IP('::255.255.240.0/117')
IP('::255.255.248.0/118')
IP('::255.255.252.0/119')
IP('::255.255.254.0/120')
IP('::255.255.255.0/121')
IP('::255.255.255.128/122')
IP('::255.255.255.192/123')
IP('::255.255.255.224/124')
IP('::255.255.255.240/125')
IP('::255.255.255.248/126')
IP('::255.255.255.252/127')
IP('::255.255.255.254')

}}}

Worst case IPv4 mapped IPv6 range to CIDR. 

{{{

>>> for ip in iprange_to_cidrs('::ffff:1', '::ffff:255.255.255.254'):
...     ip
...
IP('::255.255.0.1')
IP('::255.255.0.2/127')
IP('::255.255.0.4/126')
IP('::255.255.0.8/125')
IP('::255.255.0.16/124')
IP('::255.255.0.32/123')
IP('::255.255.0.64/122')
IP('::255.255.0.128/121')
IP('::255.255.1.0/120')
IP('::255.255.2.0/119')
IP('::255.255.4.0/118')
IP('::255.255.8.0/117')
IP('::255.255.16.0/116')
IP('::255.255.32.0/115')
IP('::255.255.64.0/114')
IP('::255.255.128.0/113')
IP('::1:0:0/96')
IP('::2:0:0/95')
IP('::4:0:0/94')
IP('::8:0:0/93')
IP('::10:0:0/92')
IP('::20:0:0/91')
IP('::40:0:0/90')
IP('::80:0:0/89')
IP('::100:0:0/88')
IP('::200:0:0/87')
IP('::400:0:0/86')
IP('::800:0:0/85')
IP('::1000:0:0/84')
IP('::2000:0:0/83')
IP('::4000:0:0/82')
IP('::8000:0:0/82')
IP('::c000:0:0/83')
IP('::e000:0:0/84')
IP('::f000:0:0/85')
IP('::f800:0:0/86')
IP('::fc00:0:0/87')
IP('::fe00:0:0/88')
IP('::ff00:0:0/89')
IP('::ff80:0:0/90')
IP('::ffc0:0:0/91')
IP('::ffe0:0:0/92')
IP('::fff0:0:0/93')
IP('::fff8:0:0/94')
IP('::fffc:0:0/95')
IP('::fffe:0:0/96')
IP('::ffff:0.0.0.0/97')
IP('::ffff:128.0.0.0/98')
IP('::ffff:192.0.0.0/99')
IP('::ffff:224.0.0.0/100')
IP('::ffff:240.0.0.0/101')
IP('::ffff:248.0.0.0/102')
IP('::ffff:252.0.0.0/103')
IP('::ffff:254.0.0.0/104')
IP('::ffff:255.0.0.0/105')
IP('::ffff:255.128.0.0/106')
IP('::ffff:255.192.0.0/107')
IP('::ffff:255.224.0.0/108')
IP('::ffff:255.240.0.0/109')
IP('::ffff:255.248.0.0/110')
IP('::ffff:255.252.0.0/111')
IP('::ffff:255.254.0.0/112')
IP('::ffff:255.255.0.0/113')
IP('::ffff:255.255.128.0/114')
IP('::ffff:255.255.192.0/115')
IP('::ffff:255.255.224.0/116')
IP('::ffff:255.255.240.0/117')
IP('::ffff:255.255.248.0/118')
IP('::ffff:255.255.252.0/119')
IP('::ffff:255.255.254.0/120')
IP('::ffff:255.255.255.0/121')
IP('::ffff:255.255.255.128/122')
IP('::ffff:255.255.255.192/123')
IP('::ffff:255.255.255.224/124')
IP('::ffff:255.255.255.240/125')
IP('::ffff:255.255.255.248/126')
IP('::ffff:255.255.255.252/127')
IP('::ffff:255.255.255.254')

}}}

RFC 4291 CIDR tests.

{{{

>>> str(IP('2001:0DB8:0000:CD30:0000:0000:0000:0000/60'))
'2001:db8:0:cd30::/60'

>>> str(IP('2001:0DB8::CD30:0:0:0:0/60'))
'2001:db8:0:cd30::/60'

>>> str(IP('2001:0DB8:0:CD30::/60'))
'2001:db8:0:cd30::/60'

}}}

Equality tests.

{{{

>>> IP('192.0.2.0/255.255.254.0') == IP('192.0.2.0/23')
True

>>> IP('192.0.2.65/255.255.254.0') == IP('192.0.2.0/23')
True

>>> IP('192.0.2.65/255.255.254.0') == IP('192.0.2.65/23')
True

>>> IP('192.0.2.65/255.255.255.0') == IP('192.0.2.0/23')
False

>>> IP('192.0.2.65/255.255.254.0') == IP('192.0.2.65/24')
False

}}}

Slicing tests.

{{{

>>> ip = IP('192.0.2.0/23')
>>> ip.first == 3221225984
True

>>> ip.last == 3221226495
True

>>> ip[0]
IP('192.0.2.0')

>>> ip[-1]
IP('192.0.3.255')

>>> list(ip[::128])
[IP('192.0.2.0'), IP('192.0.2.128'), IP('192.0.3.0'), IP('192.0.3.128')]

>>> ip = IP('fe80::/10')
>>> ip[0]
IP('fe80::')

>>> ip[-1]
IP('febf:ffff:ffff:ffff:ffff:ffff:ffff:ffff')

>>> ip.size == 332306998946228968225951765070086144
True

>>> list(ip[0:5:1])
Traceback (most recent call last):
...
TypeError: slices unsupported on IPv6 objects!


}}}

Membership tests.

{{{

>>> IP('192.0.2.1') in IP('192.0.2.0/24')
True

>>> IP('192.0.2.255') in IP('192.0.2.0/24')
True

>>> IP('192.0.2.0/24') in IP('192.0.2.0/23')
True

>>> IP('192.0.2.0/24') in IP('192.0.2.0/24')
True

>>> IP('ffff::1') in IP('ffff::/127')
True

>>> IP('192.0.2.0/23') in IP('192.0.2.0/24')
False

}}}

Equality tests.

{{{

>>> IP('192.0.2.0/24') == IP('192.0.2.0/24')
True

>>> IP('192.0.2.0/24') is not IP('192.0.2.0/24')
True

>>> IP('192.0.2.0/24') != IP('192.0.2.0/24')
False

>>> IP('192.0.2.0/24') is IP('192.0.2.0/24')
False

>>> IP('fe80::/10') == IP('fe80::/10')
True

>>> IP('fe80::/10') is not IP('fe80::/10')
True

>>> IP('fe80::/10') != IP('fe80::/10')
False

>>> IP('fe80::/10') is IP('fe80::/10')
False

}}}

Exclusion tests.

{{{

#   Equivalent to :-
#   >>> set([1]) - set([1])
#   set([1])
>>> cidr_exclude('192.0.2.1/32', '192.0.2.1/32')
[]

#   Equivalent to :-
#   >>> set([1,2]) - set([2])
#   set([1])
>>> cidr_exclude('192.0.2.0/31', '192.0.2.1/32')
[IP('192.0.2.0')]

#   Equivalent to :-
#   >>> set([1,2,3,4,5,6,7,8]) - set([5,6,7,8])
#   set([1, 2, 3, 4])
>>> cidr_exclude('192.0.2.0/24', '192.0.2.128/25')
[IP('192.0.2.0/25')]

#   Equivalent to :-
#   >>> set([1,2,3,4,5,6,7,8]) - set([5,6])
#   set([1, 2, 3, 4, 7, 8])
>>> cidr_exclude('192.0.2.0/24', '192.0.2.128/27')
[IP('192.0.2.0/25'), IP('192.0.2.160/27'), IP('192.0.2.192/26')]

#   Subtracting a larger range from a smaller one results in an empty
#   list (rather than a negative CIDR - which would be rather odd)!
#
#   Equivalent to :-
#   >>> set([1]) - set([1,2,3])
#   set([])
>>> cidr_exclude('192.0.2.1/32', '192.0.2.0/24')
[]

}}}

Please Note: excluding IP subnets that are not within each other and have no overlaps should return the original target IP object.

{{{

#   Equivalent to :-
#   >>> set([1,2,3]) - set([4])
#   set([1,2,3])
>>> cidr_exclude('192.0.2.0/28', '192.0.2.16/32')
[IP('192.0.2.0/28')]

#   Equivalent to :-
#   >>> set([1]) - set([2,3,4])
#   set([1])
>>> cidr_exclude('192.0.1.255/32', '192.0.2.0/28')
[IP('192.0.1.255')]

}}}

Merge tests.

{{{

>>> cidr_merge(['192.0.128.0/24', '192.0.129.0/24'])
[IP('192.0.128.0/23')]

>>> cidr_merge(['192.0.129.0/24', '192.0.130.0/24'])
[IP('192.0.129.0/24'), IP('192.0.130.0/24')]

>>> cidr_merge(['192.0.2.112/30', '192.0.2.116/31', '192.0.2.118/31'])
[IP('192.0.2.112/29')]

>>> cidr_merge(['192.0.2.112/30', '192.0.2.116/32', '192.0.2.118/31'])
[IP('192.0.2.112/30'), IP('192.0.2.116'), IP('192.0.2.118/31')]

>>> cidr_merge(['192.0.2.112/31', '192.0.2.116/31', '192.0.2.118/31'])
[IP('192.0.2.112/31'), IP('192.0.2.116/30')]

>>> cidr_merge(['192.0.1.254/31',
... '192.0.2.0/28',
... '192.0.2.16/28',
... '192.0.2.32/28',
... '192.0.2.48/28',
... '192.0.2.64/28',
... '192.0.2.80/28',
... '192.0.2.96/28',
... '192.0.2.112/28',
... '192.0.2.128/28',
... '192.0.2.144/28',
... '192.0.2.160/28',
... '192.0.2.176/28',
... '192.0.2.192/28',
... '192.0.2.208/28',
... '192.0.2.224/28',
... '192.0.2.240/28',
... '192.0.3.0/28'])
[IP('192.0.1.254/31'), IP('192.0.2.0/24'), IP('192.0.3.0/28')]

}}}

Extended merge tests.

{{{

>>> import random

#   Start with a single /23 CIDR.

>>> orig_cidr_ipv4 = IP('192.0.2.0/23')
>>> orig_cidr_ipv6 = IP('::192.0.2.0/120')

#   Split it into /28 subnet CIDRs (mix CIDR objects and CIDR strings).

>>> cidr_subnets = []
>>> cidr_subnets.extend([str(c) for c in orig_cidr_ipv4.subnet(28)])
>>> cidr_subnets.extend(list(orig_cidr_ipv4.subnet(28)))
>>> cidr_subnets.extend([str(c) for c in orig_cidr_ipv6.subnet(124)])
>>> cidr_subnets.extend(list(orig_cidr_ipv6.subnet(124)))

#   Add a couple of duplicates in to make sure summarization is working OK.

>>> cidr_subnets.append('192.0.2.1/32')
>>> cidr_subnets.append('192.0.2.128/25')
>>> cidr_subnets.append('::192.0.2.92/128')

#   Randomize the order of subnets.
>>> random.shuffle(cidr_subnets)

#   Perform summarization operation.
>>> merged_cidrs = cidr_merge(cidr_subnets) 
>>> merged_cidrs
[IP('192.0.2.0/23'), IP('::192.0.2.0/120')]

>>> merged_cidrs == [orig_cidr_ipv4, orig_cidr_ipv6]
True

}}}
